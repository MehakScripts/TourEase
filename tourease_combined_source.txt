
========== TOUREASE PROJECT ==========
Full-stack Tourism Management Platform
======================================

ðŸš€ 1. BACKEND - server/server.js
--------------------------------
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

const itineraryRoutes = require('./routes/itinerary');
const bookingRoutes = require('./routes/bookings');
const destinationRoutes = require('./routes/destinations');

const app = express();
app.use(cors());
app.use(express.json());

app.use('/api/itineraries', itineraryRoutes);
app.use('/api/bookings', bookingRoutes);
app.use('/api/destinations', destinationRoutes);

mongoose.connect(process.env.MONGO_URI)
  .then(() => app.listen(5000, () => console.log('Server ready on port 5000')))
  .catch(console.error);


ðŸš€ 2. BACKEND MODELS
---------------------

ðŸ“Œ Destination Model - server/models/Destination.js
---------------------------------------------------
const mongoose = require('mongoose');

const destinationSchema = new mongoose.Schema({
  name: String,
  description: String,
  location: String,
  imageUrl: String,
  isHiddenGem: Boolean
});

module.exports = mongoose.model('Destination', destinationSchema);


ðŸ“Œ Itinerary Model - server/models/Itinerary.js
-----------------------------------------------
const mongoose = require('mongoose');

const itinerarySchema = new mongoose.Schema({
  location: String,
  days: Number,
  itineraryText: String
});

module.exports = mongoose.model('Itinerary', itinerarySchema);


ðŸ“Œ Booking Model - server/models/Booking.js
-------------------------------------------
const mongoose = require('mongoose');

const bookingSchema = new mongoose.Schema({
  userName: String,
  destinationId: mongoose.Schema.Types.ObjectId,
  date: String
});

module.exports = mongoose.model('Booking', bookingSchema);


ðŸš€ 3. ROUTES - server/routes/destinations.js
--------------------------------------------
const express = require('express');
const Destination = require('../models/Destination');
const router = express.Router();

router.get('/', async (req, res) => {
  const list = await Destination.find();
  res.json(list);
});

router.post('/', async (req, res) => {
  const dest = new Destination(req.body);
  await dest.save();
  res.status(201).json(dest);
});

module.exports = router;


ðŸš€ 4. CONTROLLERS - server/controllers/itineraryController.js
-------------------------------------------------------------
const Itinerary = require('../models/Itinerary');
const Destination = require('../models/Destination');

exports.createItinerary = async (req, res) => {
  const { location, days } = req.body;
  const suggestions = await Destination.find({ location: new RegExp(location, 'i') }).limit(days);
  const itineraryText = suggestions.map((d,i)=>`${i+1}. Visit ${d.name}: ${d.description}`).join('\n');
  const doc = await new Itinerary({ location, days, itineraryText });
  await doc.save();
  res.json(doc);
};


ðŸš€ 5. FRONTEND - client/src/pages/Home.jsx
------------------------------------------
import React, { useEffect, useState } from 'react';
import axios from 'axios';

export default function Home(){
  const [dests, setDests] = useState([]);
  useEffect(()=>{
    axios.get('/api/destinations').then(r=>setDests(r.data));
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold">Discover Hidden Gems of India</h1>
      <div className="grid gap-4 grid-cols-1 md:grid-cols-3">
        {dests.map(d => (
          <div key={d._id} className="shadow-lg rounded p-4">
            <img src={d.imageUrl} alt={d.name} className="w-full h-48 object-cover"/>
            <h2 className="text-xl font-semibold mt-2">{d.name}</h2>
            <p>{d.description}</p>
          </div>
        ))}
      </div>
    </div>
  );
}


ðŸš€ 6. FRONTEND - client/src/components/ItineraryForm.jsx
---------------------------------------------------------
import React, { useState } from 'react';
import axios from 'axios';

export default function ItineraryForm(){
  const [form, setForm] = useState({ location: '', days: '' });
  const [result, setResult] = useState(null);

  const submit = async e => {
    e.preventDefault();
    const res = await axios.post('/api/itineraries', form);
    setResult(res.data);
  };

  return (
    <form onSubmit={submit} className="p-4">
      <input name="location" placeholder="Goa" onChange={e=>setForm({...form,location:e.target.value})}/>
      <input name="days" placeholder="3" onChange={e=>setForm({...form,days:e.target.value})}/>
      <button type="submit">Generate Itinerary</button>
      {result && <div>{result.itineraryText}</div>}
    </form>
  );
}


ðŸ“˜ README.md
-------------
# Tourease
A platform to explore and book lesser-known travel destinations in India.

## Setup
1. Run `npm install` in both `client` and `server`.
2. Set up `.env` with your MongoDB URI:
   MONGO_URI=mongodb+srv://<your-user>:<password>@cluster.mongodb.net/tourease
3. Run backend: `cd server && node server.js`
4. Run frontend: `cd client && npm start`

